This last semester we were not able to do our own projects in 373, thanks to COVID. So the staff threw together a project that we all did individually and sent us the necessary parts to complete it. It was taking a STM evaluation boards, a Zumo chassis, a light sensor, distance sensor, and servo to setup a robot that would navigate obstacles and head toward a light source.

In 373, they really just want you to understand the basic communication protocols (SPI, UART, I2C), how hardware and software interrupts work (priorities, how they are handled), setting up and using timers, generating PWM signals, and if a board has a FPGA being able to setup the things mentioned above using that. Probably the most important thing they want you to walk away with is the ability to read the spec sheet of a component and figure out how you communicate with it using your board.

So any sort of project you can come up with that keeps it simple, but touches on most of the above will go a long ways towards showing competency in 373 material.
So, I'll just say off the bat that 473 is pretty tough, and that if your background is not in ECE you will have an uphill battle ahead of you. It's a really fascinating class (easily one of my favorites) but it also very heavily builds on its prerequisites. Because the project is so central to the course and it is taught as an MDE, the project starts pretty early, which means you'll need to be fluent enough with the 373 material to start making high-level decisions about the design of your project from the very beginning (though lectures will start to help things like PCB design which won't need to be ready until midterm). I will say though that if you can make a link between your primary field and your project, it could make for a very interesting project!

I think /u/Vessec has a good summary of the key takeaways from 373. I'm not sure what your advisor had in mind, but I would say the most important thing is being able to work with a microcontroller without using the Arduino IDE. That could be a dev board like the [Nucleo  F401RE](https://www.st.com/en/evaluation-tools/nucleo-f401re.html) used for the COVID-adjusted 373 projects last semester, or if you already had an Arduino you could program it [with another IDE and library set](https://www.eclipse.org/community/eclipse_newsletter/2017/april/article4.php) to get around the parts where Arduino holds your hand a bit too much. Memory-mapped I/O and using the microcontroller's internal registers are another important skill from 373 that demonstrate a good understanding of how things work in the microcontroller (even if they're often abstracted away by libraries of some kind). Also, if your main field is not ECE, you'll probably want to brush up on some EECS 215 circuit material as well. You can skate by without going into too much detail for many things, but it's good to know. 

I wouldn't worry too much about FPGAs/Verilog if your goal is 473 - most groups don't use them. They have many applications, but in 373 I think they're more important as a teaching  tool for things like MMIO and timers. The same goes for assembly, even though the first few labs in 373 use it. In 473 you might look at a disassembled program while debugging or something but most of the programming happens in C/C++.
[deleted]
I took EECS 281 370 376 MATH417 and 2 other small EECS courses last fall and I would tell you it is doable before final week. 370 hws take you like 0.5-1 day/hw and there are 6 hws. 370 projects take you like 1.5-2 days/project to code and debug, and there are 4 projects. 281 is really hard, but staffs are pretty generous to give hints and optimization tips, especially one of your instructors, Dr. P. It’s hard to estimate the time (sometimes I need 1 week to optimize on my own), but if you feel upset about your coding performance, staffs will help you a lot (Dr. P will optimize my code in 1 minute). I would recommend Prof. Chan’s 417. She is really nice and passionate, and her exams and grade are reasonable. Final week killed me at last. I have very limited time to review, which ruined my 376 exam, which is my last exam. So be cautious before doing this, you need to manage your time well and, most importantly, start your projects as soon as they release the spec
That doesn’t sound too bad! I’m taking both of them, Math 214, a history class, and a couple one credit courses and I’ve managed to keep up so long as I start decently early on each project. Outside of class, I’m working a part time job and  put in several hours a week to university extracurriculars, so I think it matches up with your outside commitment time as well
Since you’ve taken 270, 370 is an order of magnitude easier. Your schedule is still really hard though…
[deleted]
Nothing specifically that I know of. Obviously you should take 482 to get an intro to broad OS topics.

I did some kernel dev (modifying the TCP stack) for my 589 project, but I had to learn everything myself and it was on no way part of the course.

Would be happy to talk with you about it! Hmu :) would love to hear about what you're interested in doing with the kernel
http://hackertyper.com/
I don’t think it’s exactly what your looking for but EECS 201 covers a lot of doing basic things with a Linux operating system, specifically Ubuntu. Stuff like writing shell scripts and so on.
Why a virtual machine, why not dual boot?

Anyway you aren't going to be working on enterprise level stuff here, I never ran into anything that took too long to compile 
Why not just SSH into CAEN? That way you don't have to worry about matching software versions, slowdown from virtual machines, or compile time. It's worth knowing how to use vim or emacs via terminal. And you're going to need to use CAEN anyway, because you need to make sure your code runs properly before submitting it. CAEN is also mandatory in some of those classes (e.g. 470) because you'll be using expensive tools that you won't be able to run on your personal computer.

If you really want to use a GUI text editor, you can pretty easily set up a git repo on both your laptop and CAEN account. Then you can do all your coding locally (useful if you don't always have a network connection) and have a CAEN SSH session where all you do is type "git pull" and "make". 
I would say yes, it's enough.
you should work in the BBB lab or UGLI basement as much as possible. I started doing a lot better in my eecs classes the more I worked in the lab. I caught many office hours while working there, learned things from other students, met other eecs students, which in turn helped me make friends with other eecs students. Working the lab can help you directly and indirectly in so many ways.
